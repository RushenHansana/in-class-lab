//using arrays
#include <iostream>
#include <cstdlib>
#include <ctime>
#include <chrono>
using namespace std;

class Stack {
private:
    int top;
    int capacity;
    int *arr;
public:
    Stack(int size) {
        top = -1;
        capacity = size;
        arr = new int[size];
    }
    ~Stack() {
        delete[] arr;
    }
    void push(int val) {
        if (top == capacity - 1) {
            cout << "Stack Oflow\n";
            return;
        }
        top++;
        arr[top] = val;
    }
    int pop() {
        if (top == -1) {
            cout << "Stack Uflow\n";
            return -1;
        }
        int val = arr[top];
        top--;
        return val;
    }
    int peek() {
        if (top == -1) {
            cout << "empty\n";
            return -1;
        }
        return arr[top];
    }
    bool is_empty() {
        return top == -1;
    }
    void display() {
        if (top == -1) {
            cout << "empty\n";
            return;
        }
        cout << "Stack: ";
        for (int i = top; i >= 0; i--)
            cout << arr[i] << " ";
        cout << endl;
    }
};

int main() {
    Stack s(10);
    auto start = std::chrono::high_resolution_clock::now();
    s.push(8);
    s.push(10);
    s.push(5);
    s.push(11);
    s.push(15);
    s.push(23);
    s.push(6);
    s.push(18);
    s.push(20);
    s.push(17);
    s.display();

    for (int i = 0; i < 5; i++)
        s.pop();
    s.display();

    s.push(4);
    s.push(30);
    s.push(3);
    s.push(1);
    s.display();
    auto end = std::chrono::high_resolution_clock::now();  
    std::chrono::duration<double> elapsed = end - start;   
    
    cout<<"time taken "<<elapsed.count()<<"s"<<endl;

    return 0;
}