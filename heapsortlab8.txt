#include <iostream>
using namespace std;

// function to heapify the tree
void heapify(int arr[], int n, int root)
{
    int maximum = root; //  maximum as root
    int leftchild = 2*root + 1; // leftchild 
    int rightchild = 2*root + 2; //  rightchild 
 
    // if leftchild child > root
    if (leftchild < n && arr[leftchild] > arr[maximum])
        maximum = leftchild;
 
    // if rightchild child > maximum so far
    if (rightchild < n && arr[rightchild] > arr[maximum])
        maximum = rightchild;
 
    // if maximum != root
    if (maximum != root) {
        swap(arr[root], arr[maximum]);
 
        // recursively heapify 
        heapify(arr, n, maximum);
    }
}

// implementing heap sort
void heapSort(int arr[], int n)
{
    // build heap
    for (int i = n / 2 - 1; i >= 0; i--)
        heapify(arr, n, i);
 
    // extracting elements from heap
    for (int i=n-1; i>=0; i--)
    {
        // move current root to end
        swap(arr[0], arr[i]);
 
        // call max heapify on the reduced heap
        heapify(arr, i, 0);
    }
}

/* print contents of array */
void displayArray(int arr[], int n)
{
    for (int i=0; i<n; ++i)
        cout << arr[i] << " ";
    cout << "\n";
}

// main program modified to take user input
int main()
{
    int n;
    cout << "Enter the number of elements: ";
    cin >> n;

    int heap_arr[n];
    cout << "Enter " << n << " elements: ";
    for(int i=0; i<n; i++)
        cin >> heap_arr[i];

    cout << "Input array: ";
    displayArray(heap_arr, n);

    heapSort(heap_arr, n);

    cout << "Sorted array: ";
    displayArray(heap_arr, n);

    return 0;
}
 
