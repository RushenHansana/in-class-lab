//linked lists
#include<iostream>
#include <cstdlib>
#include <ctime>
#include <chrono>
using namespace std;

class Node{
public:
    int data;
    Node* next;
};

class Stack{
private:
    Node* top;
public:
    Stack(){
        top = NULL;
    }

    bool is_empty(){
        return top == NULL;
    }

    void push(int item){
        Node* temp = new Node();
        temp->data = item;
        temp->next = top;
        top = temp;
    }

    int pop(){
        if(is_empty()){
            cout<<"Stack Underflow"<<endl;
            return -1;
        }
        Node* temp = top;
        int item = temp->data;
        top = top->next;
        delete(temp);
        return item;
    }

    int peek(){
        if(is_empty()){
            cout<<"Stack Underflow"<<endl;
            return -1;
        }
        return top->data;
    }

    void display(){
        cout << "Stack: ";
        if(is_empty()){
            cout<<"Stack is empty"<<endl;
            return;
        }
        Node* temp = top;
        while(temp != NULL){
            cout<<temp->data<<" ";
            temp = temp->next;
        }
        cout<<endl;
    }
};

int main(){
    Stack s;
    auto start = std::chrono::high_resolution_clock::now();
    s.push(8);
    s.push(10);
    s.push(5);
    s.push(11);
    s.push(15);
    s.push(23);
    s.push(6);
    s.push(18);
    s.push(20);
    s.push(17);

    s.display();

    for(int i=0; i<5; i++)
        s.pop();

    s.display();

    s.push(4);
    s.push(30);
    s.push(3);
    s.push(1);

    s.display();
    auto end = std::chrono::high_resolution_clock::now();  
    std::chrono::duration<double> elapsed = end - start;   
    
    cout<<"time taken "<<elapsed.count()<<"s"<<endl;

    return 0;
}