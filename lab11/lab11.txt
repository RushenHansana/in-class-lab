#include <iostream>
#include <vector>
#include <queue>
#include <climits>

#define V 6

typedef std::pair<int, int> iPair;

void addEdge(std::vector<iPair> adj[], int u, int v, int w) {
    adj[u].push_back(std::make_pair(v, w));
    adj[v].push_back(std::make_pair(u, w));
}

void primMST(std::vector<iPair> adj[]) {
    std::priority_queue<iPair, std::vector<iPair>, std::greater<iPair>> pq;
    int src = 0;

    std::vector<int> key(V, INT_MAX);
    std::vector<int> parent(V, -1);
    std::vector<bool> inMST(V, false);

    pq.push(std::make_pair(0, src));
    key[src] = 0;

    while (!pq.empty()) {
        int u = pq.top().second;
        pq.pop();

        inMST[u] = true;

        for (auto x : adj[u]) {
            int v = x.first;
            int weight = x.second;

            if (!inMST[v] && key[v] > weight) {
                key[v] = weight;
                pq.push(std::make_pair(key[v], v));
                parent[v] = u;
            }
        }
    }

    std::cout << "Edge \tWeight\n";
    for (int i = 1; i < V; ++i) {
        std::cout << parent[i] << " - " << i << "\t" << key[i] << "\n";
    }
}

int main() {
    std::vector<iPair> adj[V];

    addEdge(adj, 0, 1, 3);
    addEdge(adj, 0, 5, 1);
    addEdge(adj, 1, 2, 2);
    addEdge(adj, 1, 3, 1);
    addEdge(adj, 1, 4, 10);
    addEdge(adj, 2, 3, 3);
    addEdge(adj, 2, 5, 5);
    addEdge(adj, 3, 4, 5);
    addEdge(adj, 4, 5, 4);

    primMST(adj);

    return 0;
}
